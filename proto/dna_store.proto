syntax = "proto3";

package dna_store;

// Service definition
service StoreService {
    rpc GetById (GetByIdRequest) returns (Response);
    rpc Aggregate (AggregateRequest) returns (Response);
    rpc GetByFilter(GetByFilterRequest) returns (Response);
    rpc Update(UpdateRequest) returns (Response);
    rpc Delete(DeleteRequest) returns (Response);
    rpc Create(CreateRequest) returns (Response);
    rpc BatchCreate(BatchCreateRequest) returns (Response);
    rpc Login(LoginRequest) returns (LoginResponse);
}

// Request message
message GetByIdRequest {
    Params params = 1;  // Parameters object
    Query query = 2;    // Query object
}


//GET BY FILTER
message GetByFilterRequest{
    GetByFilterBody body = 1;
    Params params = 2;
}

message GetByFilterBody {
    repeated string pluck = 1;               // List of fields to pluck
    repeated AdvanceFilter advance_filters = 2; // List of advance filters
    string order_by = 3;                     // Field to order by
    int32 limit = 4;                         // Limit on the number of results
    int32 offset = 5;                        // Offset for pagination
    string order_direction = 6;              // Order direction (asc/desc)
}

message AdvanceFilter {
    string type = 1;                         // Filter type (criteria/operator)
    string field = 2;                        // Field to apply filter on (for criteria)
    string operator = 3;                     // Operator (e.g., equal, and)
    string values = 4;               // array of values (stringified)
}

message Value {
    oneof value {
        string string_value = 1;               // String value
        int32 int_value = 2;                   // Integer value
    }
}


//AGGREGATE
message AggregateRequest{
    AggregateBody body = 1;  // Required field for the body
    Params params = 2;  // Parameters object

}

message AggregateBody {
    repeated Aggregation aggregations = 1; // List of aggregations
    repeated AdvanceFilter advance_filters = 2; // List of advance filters
    string entity = 3; // Entity name
    string bucket_size = 4; // Bucket size
    Order order = 5; // Order object
}

message Aggregation{
    string aggregation = 1; // Required field for the aggregation
    string aggregate_on = 2; // Required field for the aggregation field
    string bucket_name = 3; // Required field for the bucket name
}

message Order{
    string order_by = 1; // Required field for the order by
    string order_direction = 2; // Required field for the order direction
}

//UPDATE REQUEST
message UpdateRequest {
    Params params = 1;  // Parameters object
    Query query = 2;    // Query object
    string body = 3;  // Required field for the body
}

// DELETE REQUEST
message DeleteRequest {
    Params params = 1;  // Parameters object
}

// CREATE REQUEST
message CreateRequest {
    CreateParams params = 1;  // Parameters object
    Query query = 2;    // Query object
    string body = 3;  // Required field for the body
}

//BATCH CREATE REQUEST
message BatchCreateRequest {
    CreateParams params = 1;  // Parameters object
    Query query = 2;    // Query object
    BatchCreateBody body = 3;  // Required field for the body
}

message BatchCreateBody{
    string records = 1; // Required field for the records
}

message CreateParams {
    string table = 1;  // Required field for the table name
}

//LOGIN REQUEST
message LoginRequest {
    LoginBody body = 1;  // Required field for the body
}

message LoginBody{
    LoginData data = 1;  // Required field for the login data
}

message LoginData{
    string email = 1;  // Required field for the email
    string password = 2;  // Required field for the password
}


message Query {
    string pluck = 1;  // Optional field, comma-separated string
}

message Params {
    string id = 1;  // Required field for the ID
    string table= 2;  // Required field for the table name
}

message LoginResponse{
    string token = 1;  // Required field for the token
}
// Response message
message Response {
    bool success = 1;                // Indicates if the operation was successful
    string message = 2;              // Message string
    string error = 3;                // Error message
    string statusCode = 4;           // HTTP status code
    int32 count = 5;                 // Count of data items
    string encoding = 6;             // Encoding type
     string data = 7;                // stringified JSON data
}

