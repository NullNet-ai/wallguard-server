// This file is @generated by prost-build.
/// Request message
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetByIdRequest {
    /// Parameters object
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
    /// Query object
    #[prost(message, optional, tag = "2")]
    pub query: ::core::option::Option<Query>,
}
/// GET BY FILTER
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetByFilterRequest {
    #[prost(message, optional, tag = "1")]
    pub body: ::core::option::Option<GetByFilterBody>,
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetByFilterBody {
    /// List of fields to pluck
    #[prost(string, repeated, tag = "1")]
    pub pluck: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// List of advance filters
    #[prost(message, repeated, tag = "2")]
    pub advance_filters: ::prost::alloc::vec::Vec<AdvanceFilter>,
    /// Field to order by
    #[prost(string, tag = "3")]
    pub order_by: ::prost::alloc::string::String,
    /// Limit on the number of results
    #[prost(int32, tag = "4")]
    pub limit: i32,
    /// Offset for pagination
    #[prost(int32, tag = "5")]
    pub offset: i32,
    /// Order direction (asc/desc)
    #[prost(string, tag = "6")]
    pub order_direction: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdvanceFilter {
    /// Filter type (criteria/operator)
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    /// Field to apply filter on (for criteria)
    #[prost(string, tag = "2")]
    pub field: ::prost::alloc::string::String,
    /// Operator (e.g., equal, and)
    #[prost(string, tag = "3")]
    pub operator: ::prost::alloc::string::String,
    /// array of values (stringified)
    #[prost(string, tag = "4")]
    pub values: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Value {
    #[prost(oneof = "value::Value", tags = "1, 2")]
    pub value: ::core::option::Option<value::Value>,
}
/// Nested message and enum types in `Value`.
pub mod value {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        /// String value
        #[prost(string, tag = "1")]
        StringValue(::prost::alloc::string::String),
        /// Integer value
        #[prost(int32, tag = "2")]
        IntValue(i32),
    }
}
/// AGGREGATE
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AggregateRequest {
    /// Required field for the body
    #[prost(message, optional, tag = "1")]
    pub body: ::core::option::Option<AggregateBody>,
    /// Parameters object
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AggregateBody {
    /// List of aggregations
    #[prost(message, repeated, tag = "1")]
    pub aggregations: ::prost::alloc::vec::Vec<Aggregation>,
    /// List of advance filters
    #[prost(message, repeated, tag = "2")]
    pub advance_filters: ::prost::alloc::vec::Vec<AdvanceFilter>,
    /// Entity name
    #[prost(string, tag = "3")]
    pub entity: ::prost::alloc::string::String,
    /// Bucket size
    #[prost(string, tag = "4")]
    pub bucket_size: ::prost::alloc::string::String,
    /// Order object
    #[prost(message, optional, tag = "5")]
    pub order: ::core::option::Option<Order>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aggregation {
    /// Required field for the aggregation
    #[prost(string, tag = "1")]
    pub aggregation: ::prost::alloc::string::String,
    /// Required field for the aggregation field
    #[prost(string, tag = "2")]
    pub aggregate_on: ::prost::alloc::string::String,
    /// Required field for the bucket name
    #[prost(string, tag = "3")]
    pub bucket_name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Order {
    /// Required field for the order by
    #[prost(string, tag = "1")]
    pub order_by: ::prost::alloc::string::String,
    /// Required field for the order direction
    #[prost(string, tag = "2")]
    pub order_direction: ::prost::alloc::string::String,
}
/// UPDATE REQUEST
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRequest {
    /// Parameters object
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
    /// Query object
    #[prost(message, optional, tag = "2")]
    pub query: ::core::option::Option<Query>,
    /// Required field for the body
    #[prost(string, tag = "3")]
    pub body: ::prost::alloc::string::String,
}
/// DELETE REQUEST
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRequest {
    /// Parameters object
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
/// CREATE REQUEST
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateRequest {
    /// Parameters object
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<CreateParams>,
    /// Query object
    #[prost(message, optional, tag = "2")]
    pub query: ::core::option::Option<Query>,
    /// Required field for the body
    #[prost(string, tag = "3")]
    pub body: ::prost::alloc::string::String,
}
/// BATCH CREATE REQUEST
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchCreateRequest {
    /// Parameters object
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<CreateParams>,
    /// Query object
    #[prost(message, optional, tag = "2")]
    pub query: ::core::option::Option<Query>,
    /// Required field for the body
    #[prost(message, optional, tag = "3")]
    pub body: ::core::option::Option<BatchCreateBody>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchCreateBody {
    /// Required field for the records
    #[prost(string, tag = "1")]
    pub records: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateParams {
    /// Required field for the table name
    #[prost(string, tag = "1")]
    pub table: ::prost::alloc::string::String,
}
/// LOGIN REQUEST
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginRequest {
    /// Required field for the body
    #[prost(message, optional, tag = "1")]
    pub body: ::core::option::Option<LoginBody>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginBody {
    /// Required field for the login data
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<LoginData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginData {
    /// Required field for the email
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
    /// Required field for the password
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Query {
    /// Optional field, comma-separated string
    #[prost(string, tag = "1")]
    pub pluck: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// Required field for the ID
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Required field for the table name
    #[prost(string, tag = "2")]
    pub table: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginResponse {
    /// Required field for the token
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
/// Response message
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Response {
    /// Indicates if the operation was successful
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Message string
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// Error message
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
    /// HTTP status code
    #[prost(string, tag = "4")]
    pub status_code: ::prost::alloc::string::String,
    /// Count of data items
    #[prost(int32, tag = "5")]
    pub count: i32,
    /// Encoding type
    #[prost(string, tag = "6")]
    pub encoding: ::prost::alloc::string::String,
    /// stringified JSON data
    #[prost(string, tag = "7")]
    pub data: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod store_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service definition
    #[derive(Debug, Clone)]
    pub struct StoreServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl StoreServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> StoreServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> StoreServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            StoreServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn get_by_id(
            &mut self,
            request: impl tonic::IntoRequest<super::GetByIdRequest>,
        ) -> std::result::Result<tonic::Response<super::Response>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dna_store.StoreService/GetById",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dna_store.StoreService", "GetById"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn aggregate(
            &mut self,
            request: impl tonic::IntoRequest<super::AggregateRequest>,
        ) -> std::result::Result<tonic::Response<super::Response>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dna_store.StoreService/Aggregate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dna_store.StoreService", "Aggregate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_by_filter(
            &mut self,
            request: impl tonic::IntoRequest<super::GetByFilterRequest>,
        ) -> std::result::Result<tonic::Response<super::Response>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dna_store.StoreService/GetByFilter",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dna_store.StoreService", "GetByFilter"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateRequest>,
        ) -> std::result::Result<tonic::Response<super::Response>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dna_store.StoreService/Update",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dna_store.StoreService", "Update"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteRequest>,
        ) -> std::result::Result<tonic::Response<super::Response>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dna_store.StoreService/Delete",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dna_store.StoreService", "Delete"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateRequest>,
        ) -> std::result::Result<tonic::Response<super::Response>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dna_store.StoreService/Create",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dna_store.StoreService", "Create"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn batch_create(
            &mut self,
            request: impl tonic::IntoRequest<super::BatchCreateRequest>,
        ) -> std::result::Result<tonic::Response<super::Response>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dna_store.StoreService/BatchCreate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dna_store.StoreService", "BatchCreate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn login(
            &mut self,
            request: impl tonic::IntoRequest<super::LoginRequest>,
        ) -> std::result::Result<tonic::Response<super::LoginResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dna_store.StoreService/Login",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dna_store.StoreService", "Login"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod store_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with StoreServiceServer.
    #[async_trait]
    pub trait StoreService: std::marker::Send + std::marker::Sync + 'static {
        async fn get_by_id(
            &self,
            request: tonic::Request<super::GetByIdRequest>,
        ) -> std::result::Result<tonic::Response<super::Response>, tonic::Status>;
        async fn aggregate(
            &self,
            request: tonic::Request<super::AggregateRequest>,
        ) -> std::result::Result<tonic::Response<super::Response>, tonic::Status>;
        async fn get_by_filter(
            &self,
            request: tonic::Request<super::GetByFilterRequest>,
        ) -> std::result::Result<tonic::Response<super::Response>, tonic::Status>;
        async fn update(
            &self,
            request: tonic::Request<super::UpdateRequest>,
        ) -> std::result::Result<tonic::Response<super::Response>, tonic::Status>;
        async fn delete(
            &self,
            request: tonic::Request<super::DeleteRequest>,
        ) -> std::result::Result<tonic::Response<super::Response>, tonic::Status>;
        async fn create(
            &self,
            request: tonic::Request<super::CreateRequest>,
        ) -> std::result::Result<tonic::Response<super::Response>, tonic::Status>;
        async fn batch_create(
            &self,
            request: tonic::Request<super::BatchCreateRequest>,
        ) -> std::result::Result<tonic::Response<super::Response>, tonic::Status>;
        async fn login(
            &self,
            request: tonic::Request<super::LoginRequest>,
        ) -> std::result::Result<tonic::Response<super::LoginResponse>, tonic::Status>;
    }
    /// Service definition
    #[derive(Debug)]
    pub struct StoreServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> StoreServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for StoreServiceServer<T>
    where
        T: StoreService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/dna_store.StoreService/GetById" => {
                    #[allow(non_camel_case_types)]
                    struct GetByIdSvc<T: StoreService>(pub Arc<T>);
                    impl<
                        T: StoreService,
                    > tonic::server::UnaryService<super::GetByIdRequest>
                    for GetByIdSvc<T> {
                        type Response = super::Response;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetByIdRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StoreService>::get_by_id(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetByIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dna_store.StoreService/Aggregate" => {
                    #[allow(non_camel_case_types)]
                    struct AggregateSvc<T: StoreService>(pub Arc<T>);
                    impl<
                        T: StoreService,
                    > tonic::server::UnaryService<super::AggregateRequest>
                    for AggregateSvc<T> {
                        type Response = super::Response;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AggregateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StoreService>::aggregate(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AggregateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dna_store.StoreService/GetByFilter" => {
                    #[allow(non_camel_case_types)]
                    struct GetByFilterSvc<T: StoreService>(pub Arc<T>);
                    impl<
                        T: StoreService,
                    > tonic::server::UnaryService<super::GetByFilterRequest>
                    for GetByFilterSvc<T> {
                        type Response = super::Response;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetByFilterRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StoreService>::get_by_filter(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetByFilterSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dna_store.StoreService/Update" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateSvc<T: StoreService>(pub Arc<T>);
                    impl<
                        T: StoreService,
                    > tonic::server::UnaryService<super::UpdateRequest>
                    for UpdateSvc<T> {
                        type Response = super::Response;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StoreService>::update(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dna_store.StoreService/Delete" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteSvc<T: StoreService>(pub Arc<T>);
                    impl<
                        T: StoreService,
                    > tonic::server::UnaryService<super::DeleteRequest>
                    for DeleteSvc<T> {
                        type Response = super::Response;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StoreService>::delete(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dna_store.StoreService/Create" => {
                    #[allow(non_camel_case_types)]
                    struct CreateSvc<T: StoreService>(pub Arc<T>);
                    impl<
                        T: StoreService,
                    > tonic::server::UnaryService<super::CreateRequest>
                    for CreateSvc<T> {
                        type Response = super::Response;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StoreService>::create(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dna_store.StoreService/BatchCreate" => {
                    #[allow(non_camel_case_types)]
                    struct BatchCreateSvc<T: StoreService>(pub Arc<T>);
                    impl<
                        T: StoreService,
                    > tonic::server::UnaryService<super::BatchCreateRequest>
                    for BatchCreateSvc<T> {
                        type Response = super::Response;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BatchCreateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StoreService>::batch_create(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = BatchCreateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dna_store.StoreService/Login" => {
                    #[allow(non_camel_case_types)]
                    struct LoginSvc<T: StoreService>(pub Arc<T>);
                    impl<
                        T: StoreService,
                    > tonic::server::UnaryService<super::LoginRequest> for LoginSvc<T> {
                        type Response = super::LoginResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LoginRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StoreService>::login(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LoginSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for StoreServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "dna_store.StoreService";
    impl<T> tonic::server::NamedService for StoreServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
