// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthorizationRequest {
    #[prost(string, tag = "1")]
    pub uuid: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub org_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Authentication {
    #[prost(string, tag = "1")]
    pub app_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub app_secret: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientMessage {
    #[prost(oneof = "client_message::Message", tags = "1, 2")]
    pub message: ::core::option::Option<client_message::Message>,
}
/// Nested message and enum types in `ClientMessage`.
pub mod client_message {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Message {
        #[prost(message, tag = "1")]
        AuthorizationRequest(super::AuthorizationRequest),
        #[prost(message, tag = "2")]
        Authentication(super::Authentication),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthenticationData {
    #[prost(string, optional, tag = "1")]
    pub app_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub app_secret: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SshSessionData {
    #[prost(string, tag = "1")]
    pub tunnel_token: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub public_key: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UiSessionData {
    #[prost(string, tag = "1")]
    pub tunnel_token: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub protocol: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerMessage {
    #[prost(
        oneof = "server_message::Message",
        tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11"
    )]
    pub message: ::core::option::Option<server_message::Message>,
}
/// Nested message and enum types in `ServerMessage`.
pub mod server_message {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Message {
        #[prost(string, tag = "1")]
        UpdateTokenCommand(::prost::alloc::string::String),
        #[prost(bool, tag = "2")]
        EnableNetworkMonitoringCommand(bool),
        #[prost(bool, tag = "3")]
        EnableConfigurationMonitoringCommand(bool),
        #[prost(bool, tag = "4")]
        EnableTelemetryMonitoringCommand(bool),
        #[prost(message, tag = "5")]
        OpenSshSessionCommand(super::SshSessionData),
        #[prost(string, tag = "6")]
        OpenTtySessionCommand(::prost::alloc::string::String),
        #[prost(message, tag = "7")]
        OpenUiSessionCommand(super::UiSessionData),
        #[prost(message, tag = "8")]
        HeartbeatMessage(()),
        #[prost(message, tag = "9")]
        DeviceAuthorizedMessage(super::AuthenticationData),
        #[prost(message, tag = "10")]
        DeviceDeauthorizedMessage(()),
        #[prost(message, tag = "11")]
        AuthorizationRejectedMessage(()),
    }
}
