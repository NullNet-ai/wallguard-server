// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthorizationRequest {
    #[prost(string, tag = "1")]
    pub organization_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub device_uuid: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthorizationStatus {
    #[prost(oneof = "authorization_status::State", tags = "1, 2, 3")]
    pub state: ::core::option::Option<authorization_status::State>,
}
/// Nested message and enum types in `AuthorizationStatus`.
pub mod authorization_status {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum State {
        #[prost(message, tag = "1")]
        Pending(()),
        #[prost(message, tag = "2")]
        Rejected(super::AuthorizationRejected),
        #[prost(message, tag = "3")]
        Approved(super::AuthorizationApproved),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthorizationApproved {
    #[prost(string, tag = "1")]
    pub app_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub app_secret: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AuthorizationRejected {
    #[prost(enumeration = "RejectionReason", tag = "1")]
    pub reason: i32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RejectionReason {
    UuidInUse = 0,
    AlreadyConnected = 1,
}
impl RejectionReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UuidInUse => "UUID_IN_USE",
            Self::AlreadyConnected => "ALREADY_CONNECTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UUID_IN_USE" => Some(Self::UuidInUse),
            "ALREADY_CONNECTED" => Some(Self::AlreadyConnected),
            _ => None,
        }
    }
}
