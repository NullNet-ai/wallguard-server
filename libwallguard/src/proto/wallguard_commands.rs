// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateTokenCommand {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnableNetworkMonitoringCommand {
    #[prost(bool, tag = "1")]
    pub enable: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnableConfigurationMonitoringCommand {
    #[prost(bool, tag = "1")]
    pub enable: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnableTelemetryMonitoringCommand {
    #[prost(bool, tag = "1")]
    pub enable: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenSshSessionCommand {
    #[prost(string, tag = "1")]
    pub tunnel_token: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub public_key: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenTtySessionCommand {
    #[prost(string, tag = "1")]
    pub tunnel_token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenUiSessionCommand {
    #[prost(string, tag = "1")]
    pub tunnel_token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WallGuardCommand {
    #[prost(oneof = "wall_guard_command::Command", tags = "1, 2, 3, 4, 5, 6, 7")]
    pub command: ::core::option::Option<wall_guard_command::Command>,
}
/// Nested message and enum types in `WallGuardCommand`.
pub mod wall_guard_command {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Command {
        #[prost(message, tag = "1")]
        UpdateToken(super::UpdateTokenCommand),
        #[prost(message, tag = "2")]
        EnableNetworkMonitoring(super::EnableNetworkMonitoringCommand),
        #[prost(message, tag = "3")]
        EnableConfigMonitoring(super::EnableConfigurationMonitoringCommand),
        #[prost(message, tag = "4")]
        EnableTelemetryMonitoring(super::EnableTelemetryMonitoringCommand),
        #[prost(message, tag = "5")]
        OpenSshSession(super::OpenSshSessionCommand),
        #[prost(message, tag = "6")]
        OpenTtySession(super::OpenTtySessionCommand),
        #[prost(message, tag = "7")]
        OpenUiSession(super::OpenUiSessionCommand),
    }
}
